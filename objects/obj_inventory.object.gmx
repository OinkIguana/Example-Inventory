<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Deactivate all other instances. Essentially pausing the game
instance_deactivate_all(true);
//Don't deactivate the controller
instance_activate_object(obj_controller);
//Other variables
selectedItem = 0;
inShop = (room == rm_store);
//Get the last slot that is not empty (quantity is 0) by looping through the grid
lastFilledSlot = 0;
while(inv_read(lastFilledSlot, ItemQty)) {
    lastFilledSlot += 1;
}
itemsPerRow = floor(room_width / ItemW);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Only try to do these things if there is something in the inventory
if(lastFilledSlot) {
    //Change the selected item on keypress
    if(keyboard_check_pressed(vk_right)) {
        //Move to the next item, looping around to the beginning after the last item
        selectedItem = (selectedItem + 1) mod lastFilledSlot;
    } else if(keyboard_check_pressed(vk_left)) {
        //Move to the previous item, going to the end if you go before the beginning
        selectedItem = (selectedItem - 1 + lastFilledSlot) mod lastFilledSlot;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Keep variables within this event
var discardMessage, slot, row, boxX, boxY, item, str, name, desc, i;
//Use the custom font for writing
draw_set_font(myFont);

//Draw a rectangle for the background. This is used to hide the deactivated instances behind
draw_set_color(make_color_rgb(100,40,40));
draw_rectangle(0, 0, room_width, room_height, false);

//Draw a message at the top
draw_set_color(c_ltgray);
//If you are in the store, tell about selling
if(inShop) {
    discardMessage = "Press &lt;S&gt; to sell it";
} else {
//If you are not in the store, drop items
    discardMessage = "Press &lt;D&gt; to drop it";
}
draw_text(5, 5, "Press &lt;space&gt; to use an item#" + discardMessage);
//Draw the inventory items the same way as the shop
for(slot = 0; slot &lt; ds_grid_width(inv); slot += 1) {
    //Check to see that there are still items in the inventory
    if(inv_read(slot, ItemQty) &gt; 0) {
        //Check if the current item is the selected item and change the colour
        if(selectedItem == slot) {
            draw_set_color(c_red);
        }
        //Find out which row to draw the sprites on
        row = floor(((ItemW + 2) * (slot + 1) + 5) / room_width);
        //Get the positions for everything in a variable
        boxX = (slot - ((itemsPerRow - 1) * row)) * ItemW + 5 + (3 * (slot - ((itemsPerRow - 1) * row)));
        boxY = row * ItemH + string_height("###") + (3 * row);
        //Draw the box
        draw_rectangle(boxX, boxY, boxX + 34, boxY + 34, true);
        //Draw the sprite
        draw_sprite(itemdb_read(inv_read(slot, ItemIndex), ItemSprite), 0, boxX + 1, boxY + 1);
        //Reset the colour before looping again or exiting loop, and drawing quantity
        draw_set_color(c_ltgray);
        draw_text(boxX + 18, boxY + 18, string(inv_read(slot, ItemQty)));
    } else {
        //If there was nothing in the inventory, tell the players that
        if(!slot) {
            draw_text(5, string_height("####"), wrap_string("The inventory is empty", room_width - 20));
        }
        //Stop looping if the inventory has no more
        break;
    }
}

//Draw some instructions
str = "Press &lt;X&gt; to close";
draw_text(room_width - string_width(str) - 5, room_height - string_height(str) - 5, str);
if(inv_read(selectedItem, ItemQty) &gt; 0) {
    //Draw some information about the item if there are items
    //Get the selected item and draw it's name and description
    item = inv_read(selectedItem, ItemIndex);
    name = itemdb_read(item, ItemName);
    desc = itemdb_read(item, ItemDesc);
    price = string(itemdb_read(item, ItemSell));
    str = desc;
    str = wrap_string(str, room_width - 30);
    draw_text(15, room_height - string_height("#########"), name + " - Sells for $" +  price + "#" + str);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Reactivate everything and remove the inventory
instance_activate_all();
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="83">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If in the shop, get rid of the item and get money for it
if(inShop) {
    inv_sell(selectedItem, 1);
}
//Find the last slot that isn't empty again
lastFilledSlot = 0;
while(inv_read(lastFilledSlot, ItemQty)) {
    lastFilledSlot += 1;
}
//And make sure that the item selected still exists
selectedItem = min(selectedItem, lastFilledSlot - 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//If not in the shop get rid of the item, no profit
if(!inShop) {
    inv_subtract(selectedItem, 1);
}
//Find the last slot that isn't empty again
lastFilledSlot = 0;
while(inv_read(lastFilledSlot, ItemQty)) {
    lastFilledSlot += 1;
}
//And make sure that the item selected still exists
selectedItem = min(selectedItem, lastFilledSlot - 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var removeItem, item;
removeItem = false;
//Figure out what item is being used
if(inv_read(selectedItem, ItemQty) != 0) {
    item = itemdb_read(inv_read(selectedItem, ItemIndex), ItemName);
    if(is_string(item)) {
        //Then find it's action and do it
        switch(item) {
            case "Apple":
                //Heal health for food
                health += 10;
                //And you ate the food, so remove it
                removeItem = true;
                break;
            case "Burger":
                health += 30;
                removeItem = true;
                break;
            case "Chocolate":
                health += 15;
                removeItem = true;
                break;
            case "Sword":
                //Change your weapon to the sword
                currentWeapon = "Sword";
                //But you don't eat the sword... so don't remove it
                break;
            default:
                //If you would like, you can put something here to do when the item has no use
                break;
        }
    }
}

//If the item is being used up (such as food)
if(removeItem) {
    //Remove one from it's quantity
    inv_subtract(selectedItem, 1);
}
//Find the last slot that isn't empty again
lastFilledSlot = 0;
while(inv_read(lastFilledSlot, ItemQty)) {
    lastFilledSlot += 1;
}
//And make sure that the item selected still exists
selectedItem = min(selectedItem, lastFilledSlot - 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
