<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Deactivate all other instances. Essentially pausing the game
instance_deactivate_all(true);
//Don't deactivate the controller
instance_activate_object(obj_controller);
//Create a new shop
shop = new_shop();
//Other variables
selectedItem = 0;
itemsPerRow = floor(room_width / ItemW);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Change the selected item on keypress
if(keyboard_check_pressed(vk_right)) {
    //Move to the next item, looping around to the beginning after the last item
    selectedItem = (selectedItem + 1) mod ds_grid_width(shop)
} else if(keyboard_check_pressed(vk_left)) {
    //Move to the previous item, going to the end if you go before the beginning
    selectedItem = (selectedItem - 1 + ds_grid_width(shop)) mod ds_grid_width(shop);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Keep variables within this event
var slot, row, boxX, boxY, item, str, name, desc, i;
//Use the custom font for writing
draw_set_font(myFont);

//Draw a rectangle for the background. This is used to hide the deactivated instances behind
draw_set_color(make_color_rgb(100,40,40));
draw_rectangle(0, 0, room_width, room_height, false);

//Draw a title at the top
draw_set_color(c_ltgray);
//This is just all caps because something is wrong with my font sprite...
draw_text(5, 5, "What would you like to buy?#Press &lt;B&gt; to buy");

/*  Draw each item in stock in its own box. The selected item's box will
    be red. For the best results, try to have all the items with the same 
    size sprites. ItemW and ItemH are custom constants. Don't forget to look in
    the constants for a better understanding of this inventory/shop system. */
for(slot = 0; slot &lt; ds_grid_width(shop); slot += 1) {
    //Check if the current item is the selected item and change the colour
    if(selectedItem == slot) {
        draw_set_color(c_red);
    }
    //Find out which row to draw the sprites on
    row = floor(((ItemW + 2) * (slot + 1) + 5) / room_width);
    //Get the positions for everything in a variable
    boxX = (slot - ((itemsPerRow - 1) * row)) * ItemW + 5 + (3 * (slot - ((itemsPerRow - 1) * row)));
    boxY = row * ItemH + string_height("###") + (3 * row);
    //Draw the box
    draw_rectangle(boxX, boxY, boxX + 34, boxY + 34, true);
    //Draw the sprite
    draw_sprite(itemdb_read(shop_get(slot), ItemSprite), 0, boxX + 1, boxY + 1);
    //Reset the colour before looping again or exiting loop
    draw_set_color(c_ltgray);
}
//Draw some instructions and information about the item
str = "Press &lt;X&gt; to close the shop";
draw_text(room_width - string_width(str) - 5, room_height - string_height(str) - 5, str);
//Get the selected item and draw it's name and description
item = shop_get(selectedItem);
name = itemdb_read(item, ItemName);
desc = itemdb_read(item, ItemDesc);
price = string(itemdb_read(item, ItemBuy));
str = desc;
str = wrap_string(str, room_width - 15);
draw_text(15, boxY + ItemH * 1.5 + string_height("#"), str);
draw_text(15, boxY + ItemH * 1.5, name + " - Costs $" +  price);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="88">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Remove the shop grid to save memory
shop_close();
//Reactivate everything to unpause
instance_activate_all();
//Remove the shop window
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="66">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Buy the item from the shop, telling the player if there was success
if(inv_buy(shop_get(selectedItem), 1)) {
    show_message("You bought 1 " + itemdb_read(shop_get(selectedItem), ItemName));
    if(itemdb_read(shop_get(selectedItem), ItemName) == "Apple") {
        //Once you buy an apple, the price goes up! Gotta love the price inflation...
        update_item("Apple", ItemBuy, 10);
    }
} else {
    show_message("You could not buy the item... You may not have enough money or your inventory has no space");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
